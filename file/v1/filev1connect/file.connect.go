// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: file/v1/file.proto

package filev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/operandinc/go-sdk/file/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "file.v1.FileService"
)

// FileServiceClient is a client for the file.v1.FileService service.
type FileServiceClient interface {
	// GetFile returns a specific file given its ID.
	GetFile(context.Context, *connect_go.Request[v1.GetFileRequest]) (*connect_go.Response[v1.GetFileResponse], error)
	// ListFiles returns a list of files, paginated.
	ListFiles(context.Context, *connect_go.Request[v1.ListFilesRequest]) (*connect_go.Response[v1.ListFilesResponse], error)
	// CreateFile creates a new file.
	CreateFile(context.Context) *connect_go.ClientStreamForClient[v1.CreateFileRequest, v1.CreateFileResponse]
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *connect_go.Request[v1.DeleteFileRequest]) (*connect_go.Response[v1.DeleteFileResponse], error)
	// UpdateFile updates a file.
	UpdateFile(context.Context, *connect_go.Request[v1.UpdateFileRequest]) (*connect_go.Response[v1.UpdateFileResponse], error)
	// ShareFile shares a file with another user.
	ShareFile(context.Context, *connect_go.Request[v1.ShareFileRequest]) (*connect_go.Response[v1.ShareFileResponse], error)
	// UnshareFile deletes an existing share of a file with another user.
	UnshareFile(context.Context, *connect_go.Request[v1.UnshareFileRequest]) (*connect_go.Response[v1.UnshareFileResponse], error)
	// AttachSync attaches a Sync to a file.
	// If the file isn't a folder, or the folder already has an attached Sync,
	// this operation will fail.
	AttachSync(context.Context, *connect_go.Request[v1.AttachSyncRequest]) (*connect_go.Response[v1.AttachSyncResponse], error)
	// DeleteSync deletes an Sync. The file contents of the folder
	// will be kept, but no further updates will be made.
	DeleteSync(context.Context, *connect_go.Request[v1.DeleteSyncRequest]) (*connect_go.Response[v1.DeleteSyncResponse], error)
}

// NewFileServiceClient constructs a client for the file.v1.FileService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileServiceClient{
		getFile: connect_go.NewClient[v1.GetFileRequest, v1.GetFileResponse](
			httpClient,
			baseURL+"/file.v1.FileService/GetFile",
			opts...,
		),
		listFiles: connect_go.NewClient[v1.ListFilesRequest, v1.ListFilesResponse](
			httpClient,
			baseURL+"/file.v1.FileService/ListFiles",
			opts...,
		),
		createFile: connect_go.NewClient[v1.CreateFileRequest, v1.CreateFileResponse](
			httpClient,
			baseURL+"/file.v1.FileService/CreateFile",
			opts...,
		),
		deleteFile: connect_go.NewClient[v1.DeleteFileRequest, v1.DeleteFileResponse](
			httpClient,
			baseURL+"/file.v1.FileService/DeleteFile",
			opts...,
		),
		updateFile: connect_go.NewClient[v1.UpdateFileRequest, v1.UpdateFileResponse](
			httpClient,
			baseURL+"/file.v1.FileService/UpdateFile",
			opts...,
		),
		shareFile: connect_go.NewClient[v1.ShareFileRequest, v1.ShareFileResponse](
			httpClient,
			baseURL+"/file.v1.FileService/ShareFile",
			opts...,
		),
		unshareFile: connect_go.NewClient[v1.UnshareFileRequest, v1.UnshareFileResponse](
			httpClient,
			baseURL+"/file.v1.FileService/UnshareFile",
			opts...,
		),
		attachSync: connect_go.NewClient[v1.AttachSyncRequest, v1.AttachSyncResponse](
			httpClient,
			baseURL+"/file.v1.FileService/AttachSync",
			opts...,
		),
		deleteSync: connect_go.NewClient[v1.DeleteSyncRequest, v1.DeleteSyncResponse](
			httpClient,
			baseURL+"/file.v1.FileService/DeleteSync",
			opts...,
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	getFile     *connect_go.Client[v1.GetFileRequest, v1.GetFileResponse]
	listFiles   *connect_go.Client[v1.ListFilesRequest, v1.ListFilesResponse]
	createFile  *connect_go.Client[v1.CreateFileRequest, v1.CreateFileResponse]
	deleteFile  *connect_go.Client[v1.DeleteFileRequest, v1.DeleteFileResponse]
	updateFile  *connect_go.Client[v1.UpdateFileRequest, v1.UpdateFileResponse]
	shareFile   *connect_go.Client[v1.ShareFileRequest, v1.ShareFileResponse]
	unshareFile *connect_go.Client[v1.UnshareFileRequest, v1.UnshareFileResponse]
	attachSync  *connect_go.Client[v1.AttachSyncRequest, v1.AttachSyncResponse]
	deleteSync  *connect_go.Client[v1.DeleteSyncRequest, v1.DeleteSyncResponse]
}

// GetFile calls file.v1.FileService.GetFile.
func (c *fileServiceClient) GetFile(ctx context.Context, req *connect_go.Request[v1.GetFileRequest]) (*connect_go.Response[v1.GetFileResponse], error) {
	return c.getFile.CallUnary(ctx, req)
}

// ListFiles calls file.v1.FileService.ListFiles.
func (c *fileServiceClient) ListFiles(ctx context.Context, req *connect_go.Request[v1.ListFilesRequest]) (*connect_go.Response[v1.ListFilesResponse], error) {
	return c.listFiles.CallUnary(ctx, req)
}

// CreateFile calls file.v1.FileService.CreateFile.
func (c *fileServiceClient) CreateFile(ctx context.Context) *connect_go.ClientStreamForClient[v1.CreateFileRequest, v1.CreateFileResponse] {
	return c.createFile.CallClientStream(ctx)
}

// DeleteFile calls file.v1.FileService.DeleteFile.
func (c *fileServiceClient) DeleteFile(ctx context.Context, req *connect_go.Request[v1.DeleteFileRequest]) (*connect_go.Response[v1.DeleteFileResponse], error) {
	return c.deleteFile.CallUnary(ctx, req)
}

// UpdateFile calls file.v1.FileService.UpdateFile.
func (c *fileServiceClient) UpdateFile(ctx context.Context, req *connect_go.Request[v1.UpdateFileRequest]) (*connect_go.Response[v1.UpdateFileResponse], error) {
	return c.updateFile.CallUnary(ctx, req)
}

// ShareFile calls file.v1.FileService.ShareFile.
func (c *fileServiceClient) ShareFile(ctx context.Context, req *connect_go.Request[v1.ShareFileRequest]) (*connect_go.Response[v1.ShareFileResponse], error) {
	return c.shareFile.CallUnary(ctx, req)
}

// UnshareFile calls file.v1.FileService.UnshareFile.
func (c *fileServiceClient) UnshareFile(ctx context.Context, req *connect_go.Request[v1.UnshareFileRequest]) (*connect_go.Response[v1.UnshareFileResponse], error) {
	return c.unshareFile.CallUnary(ctx, req)
}

// AttachSync calls file.v1.FileService.AttachSync.
func (c *fileServiceClient) AttachSync(ctx context.Context, req *connect_go.Request[v1.AttachSyncRequest]) (*connect_go.Response[v1.AttachSyncResponse], error) {
	return c.attachSync.CallUnary(ctx, req)
}

// DeleteSync calls file.v1.FileService.DeleteSync.
func (c *fileServiceClient) DeleteSync(ctx context.Context, req *connect_go.Request[v1.DeleteSyncRequest]) (*connect_go.Response[v1.DeleteSyncResponse], error) {
	return c.deleteSync.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the file.v1.FileService service.
type FileServiceHandler interface {
	// GetFile returns a specific file given its ID.
	GetFile(context.Context, *connect_go.Request[v1.GetFileRequest]) (*connect_go.Response[v1.GetFileResponse], error)
	// ListFiles returns a list of files, paginated.
	ListFiles(context.Context, *connect_go.Request[v1.ListFilesRequest]) (*connect_go.Response[v1.ListFilesResponse], error)
	// CreateFile creates a new file.
	CreateFile(context.Context, *connect_go.ClientStream[v1.CreateFileRequest]) (*connect_go.Response[v1.CreateFileResponse], error)
	// DeleteFile deletes a file.
	DeleteFile(context.Context, *connect_go.Request[v1.DeleteFileRequest]) (*connect_go.Response[v1.DeleteFileResponse], error)
	// UpdateFile updates a file.
	UpdateFile(context.Context, *connect_go.Request[v1.UpdateFileRequest]) (*connect_go.Response[v1.UpdateFileResponse], error)
	// ShareFile shares a file with another user.
	ShareFile(context.Context, *connect_go.Request[v1.ShareFileRequest]) (*connect_go.Response[v1.ShareFileResponse], error)
	// UnshareFile deletes an existing share of a file with another user.
	UnshareFile(context.Context, *connect_go.Request[v1.UnshareFileRequest]) (*connect_go.Response[v1.UnshareFileResponse], error)
	// AttachSync attaches a Sync to a file.
	// If the file isn't a folder, or the folder already has an attached Sync,
	// this operation will fail.
	AttachSync(context.Context, *connect_go.Request[v1.AttachSyncRequest]) (*connect_go.Response[v1.AttachSyncResponse], error)
	// DeleteSync deletes an Sync. The file contents of the folder
	// will be kept, but no further updates will be made.
	DeleteSync(context.Context, *connect_go.Request[v1.DeleteSyncRequest]) (*connect_go.Response[v1.DeleteSyncResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/file.v1.FileService/GetFile", connect_go.NewUnaryHandler(
		"/file.v1.FileService/GetFile",
		svc.GetFile,
		opts...,
	))
	mux.Handle("/file.v1.FileService/ListFiles", connect_go.NewUnaryHandler(
		"/file.v1.FileService/ListFiles",
		svc.ListFiles,
		opts...,
	))
	mux.Handle("/file.v1.FileService/CreateFile", connect_go.NewClientStreamHandler(
		"/file.v1.FileService/CreateFile",
		svc.CreateFile,
		opts...,
	))
	mux.Handle("/file.v1.FileService/DeleteFile", connect_go.NewUnaryHandler(
		"/file.v1.FileService/DeleteFile",
		svc.DeleteFile,
		opts...,
	))
	mux.Handle("/file.v1.FileService/UpdateFile", connect_go.NewUnaryHandler(
		"/file.v1.FileService/UpdateFile",
		svc.UpdateFile,
		opts...,
	))
	mux.Handle("/file.v1.FileService/ShareFile", connect_go.NewUnaryHandler(
		"/file.v1.FileService/ShareFile",
		svc.ShareFile,
		opts...,
	))
	mux.Handle("/file.v1.FileService/UnshareFile", connect_go.NewUnaryHandler(
		"/file.v1.FileService/UnshareFile",
		svc.UnshareFile,
		opts...,
	))
	mux.Handle("/file.v1.FileService/AttachSync", connect_go.NewUnaryHandler(
		"/file.v1.FileService/AttachSync",
		svc.AttachSync,
		opts...,
	))
	mux.Handle("/file.v1.FileService/DeleteSync", connect_go.NewUnaryHandler(
		"/file.v1.FileService/DeleteSync",
		svc.DeleteSync,
		opts...,
	))
	return "/file.v1.FileService/", mux
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) GetFile(context.Context, *connect_go.Request[v1.GetFileRequest]) (*connect_go.Response[v1.GetFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.GetFile is not implemented"))
}

func (UnimplementedFileServiceHandler) ListFiles(context.Context, *connect_go.Request[v1.ListFilesRequest]) (*connect_go.Response[v1.ListFilesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.ListFiles is not implemented"))
}

func (UnimplementedFileServiceHandler) CreateFile(context.Context, *connect_go.ClientStream[v1.CreateFileRequest]) (*connect_go.Response[v1.CreateFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.CreateFile is not implemented"))
}

func (UnimplementedFileServiceHandler) DeleteFile(context.Context, *connect_go.Request[v1.DeleteFileRequest]) (*connect_go.Response[v1.DeleteFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.DeleteFile is not implemented"))
}

func (UnimplementedFileServiceHandler) UpdateFile(context.Context, *connect_go.Request[v1.UpdateFileRequest]) (*connect_go.Response[v1.UpdateFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.UpdateFile is not implemented"))
}

func (UnimplementedFileServiceHandler) ShareFile(context.Context, *connect_go.Request[v1.ShareFileRequest]) (*connect_go.Response[v1.ShareFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.ShareFile is not implemented"))
}

func (UnimplementedFileServiceHandler) UnshareFile(context.Context, *connect_go.Request[v1.UnshareFileRequest]) (*connect_go.Response[v1.UnshareFileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.UnshareFile is not implemented"))
}

func (UnimplementedFileServiceHandler) AttachSync(context.Context, *connect_go.Request[v1.AttachSyncRequest]) (*connect_go.Response[v1.AttachSyncResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.AttachSync is not implemented"))
}

func (UnimplementedFileServiceHandler) DeleteSync(context.Context, *connect_go.Request[v1.DeleteSyncRequest]) (*connect_go.Response[v1.DeleteSyncResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("file.v1.FileService.DeleteSync is not implemented"))
}
