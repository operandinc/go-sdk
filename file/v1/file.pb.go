// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: file/v1/file.proto

package filev1

import (
	v1 "github.com/operandinc/go-sdk/tenant/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SharingRole is the role of a user in a shared file.
type SharingRole int32

const (
	SharingRole_SHARING_ROLE_UNSPECIFIED SharingRole = 0
	SharingRole_SHARING_ROLE_OWNER       SharingRole = 1
	SharingRole_SHARING_ROLE_EDITOR      SharingRole = 2
	SharingRole_SHARING_ROLE_VIEWER      SharingRole = 3
)

// Enum value maps for SharingRole.
var (
	SharingRole_name = map[int32]string{
		0: "SHARING_ROLE_UNSPECIFIED",
		1: "SHARING_ROLE_OWNER",
		2: "SHARING_ROLE_EDITOR",
		3: "SHARING_ROLE_VIEWER",
	}
	SharingRole_value = map[string]int32{
		"SHARING_ROLE_UNSPECIFIED": 0,
		"SHARING_ROLE_OWNER":       1,
		"SHARING_ROLE_EDITOR":      2,
		"SHARING_ROLE_VIEWER":      3,
	}
)

func (x SharingRole) Enum() *SharingRole {
	p := new(SharingRole)
	*p = x
	return p
}

func (x SharingRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SharingRole) Descriptor() protoreflect.EnumDescriptor {
	return file_file_v1_file_proto_enumTypes[0].Descriptor()
}

func (SharingRole) Type() protoreflect.EnumType {
	return &file_file_v1_file_proto_enumTypes[0]
}

func (x SharingRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SharingRole.Descriptor instead.
func (SharingRole) EnumDescriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{0}
}

// SyncKind is an enumeration over the various supported syncs.
type SyncKind int32

const (
	SyncKind_SYNC_KIND_UNSPECIFIED       SyncKind = 0
	SyncKind_SYNC_KIND_SITEMAP           SyncKind = 1
	SyncKind_SYNC_KIND_RSS               SyncKind = 2
	SyncKind_SYNC_KIND_SLACK             SyncKind = 3
	SyncKind_SYNC_KIND_GITHUB_REPOSITORY SyncKind = 4
	SyncKind_SYNC_KIND_NOTION            SyncKind = 5
	SyncKind_SYNC_KIND_DISCORD           SyncKind = 6
	SyncKind_SYNC_KIND_LINEAR            SyncKind = 7
	SyncKind_SYNC_KIND_MEETING_BOT       SyncKind = 8
)

// Enum value maps for SyncKind.
var (
	SyncKind_name = map[int32]string{
		0: "SYNC_KIND_UNSPECIFIED",
		1: "SYNC_KIND_SITEMAP",
		2: "SYNC_KIND_RSS",
		3: "SYNC_KIND_SLACK",
		4: "SYNC_KIND_GITHUB_REPOSITORY",
		5: "SYNC_KIND_NOTION",
		6: "SYNC_KIND_DISCORD",
		7: "SYNC_KIND_LINEAR",
		8: "SYNC_KIND_MEETING_BOT",
	}
	SyncKind_value = map[string]int32{
		"SYNC_KIND_UNSPECIFIED":       0,
		"SYNC_KIND_SITEMAP":           1,
		"SYNC_KIND_RSS":               2,
		"SYNC_KIND_SLACK":             3,
		"SYNC_KIND_GITHUB_REPOSITORY": 4,
		"SYNC_KIND_NOTION":            5,
		"SYNC_KIND_DISCORD":           6,
		"SYNC_KIND_LINEAR":            7,
		"SYNC_KIND_MEETING_BOT":       8,
	}
)

func (x SyncKind) Enum() *SyncKind {
	p := new(SyncKind)
	*p = x
	return p
}

func (x SyncKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncKind) Descriptor() protoreflect.EnumDescriptor {
	return file_file_v1_file_proto_enumTypes[1].Descriptor()
}

func (SyncKind) Type() protoreflect.EnumType {
	return &file_file_v1_file_proto_enumTypes[1]
}

func (x SyncKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncKind.Descriptor instead.
func (SyncKind) EnumDescriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{1}
}

// IndexingStatus is the status of a file's indexing.
// If ready, the file's contents will show up in search results.
type IndexingStatus int32

const (
	IndexingStatus_INDEXING_STATUS_UNSPECIFIED IndexingStatus = 0
	IndexingStatus_INDEXING_STATUS_QUEUED      IndexingStatus = 1
	IndexingStatus_INDEXING_STATUS_INDEXING    IndexingStatus = 2
	IndexingStatus_INDEXING_STATUS_READY       IndexingStatus = 3
	IndexingStatus_INDEXING_STATUS_FAILED      IndexingStatus = 4
	IndexingStatus_INDEXING_STATUS_UNSUPPORTED IndexingStatus = 5
)

// Enum value maps for IndexingStatus.
var (
	IndexingStatus_name = map[int32]string{
		0: "INDEXING_STATUS_UNSPECIFIED",
		1: "INDEXING_STATUS_QUEUED",
		2: "INDEXING_STATUS_INDEXING",
		3: "INDEXING_STATUS_READY",
		4: "INDEXING_STATUS_FAILED",
		5: "INDEXING_STATUS_UNSUPPORTED",
	}
	IndexingStatus_value = map[string]int32{
		"INDEXING_STATUS_UNSPECIFIED": 0,
		"INDEXING_STATUS_QUEUED":      1,
		"INDEXING_STATUS_INDEXING":    2,
		"INDEXING_STATUS_READY":       3,
		"INDEXING_STATUS_FAILED":      4,
		"INDEXING_STATUS_UNSUPPORTED": 5,
	}
)

func (x IndexingStatus) Enum() *IndexingStatus {
	p := new(IndexingStatus)
	*p = x
	return p
}

func (x IndexingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_file_v1_file_proto_enumTypes[2].Descriptor()
}

func (IndexingStatus) Type() protoreflect.EnumType {
	return &file_file_v1_file_proto_enumTypes[2]
}

func (x IndexingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexingStatus.Descriptor instead.
func (IndexingStatus) EnumDescriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{2}
}

// PaginationRequest contains generic pagination request information.
type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor   *string `protobuf:"bytes,1,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	PageSize *int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationRequest) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *PaginationRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

// PaginationResponse contains generic pagination response information.
type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextCursor *string `protobuf:"bytes,1,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationResponse) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

// ReturnedFileOptions contains options for the returned file object (i.e. in the response).
type ReturnedFileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to include all parents of the file in the response.
	IncludeParents bool `protobuf:"varint,1,opt,name=include_parents,json=includeParents,proto3" json:"include_parents,omitempty"`
}

func (x *ReturnedFileOptions) Reset() {
	*x = ReturnedFileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnedFileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnedFileOptions) ProtoMessage() {}

func (x *ReturnedFileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnedFileOptions.ProtoReflect.Descriptor instead.
func (*ReturnedFileOptions) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{2}
}

func (x *ReturnedFileOptions) GetIncludeParents() bool {
	if x != nil {
		return x.IncludeParents
	}
	return false
}

// FileSelector selects a file by ID or path.
type FileSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//	*FileSelector_Id
	//	*FileSelector_ByName_
	Selector isFileSelector_Selector `protobuf_oneof:"selector"`
}

func (x *FileSelector) Reset() {
	*x = FileSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSelector) ProtoMessage() {}

func (x *FileSelector) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSelector.ProtoReflect.Descriptor instead.
func (*FileSelector) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{3}
}

func (m *FileSelector) GetSelector() isFileSelector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *FileSelector) GetId() string {
	if x, ok := x.GetSelector().(*FileSelector_Id); ok {
		return x.Id
	}
	return ""
}

func (x *FileSelector) GetByName() *FileSelector_ByName {
	if x, ok := x.GetSelector().(*FileSelector_ByName_); ok {
		return x.ByName
	}
	return nil
}

type isFileSelector_Selector interface {
	isFileSelector_Selector()
}

type FileSelector_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type FileSelector_ByName_ struct {
	ByName *FileSelector_ByName `protobuf:"bytes,2,opt,name=by_name,json=byName,proto3,oneof"`
}

func (*FileSelector_Id) isFileSelector_Selector() {}

func (*FileSelector_ByName_) isFileSelector_Selector() {}

// GetFileRequest requests a specific file by ID.
type GetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector      *FileSelector        `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	ReturnOptions *ReturnedFileOptions `protobuf:"bytes,2,opt,name=return_options,json=returnOptions,proto3,oneof" json:"return_options,omitempty"`
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{4}
}

func (x *GetFileRequest) GetSelector() *FileSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *GetFileRequest) GetReturnOptions() *ReturnedFileOptions {
	if x != nil {
		return x.ReturnOptions
	}
	return nil
}

// GetFileResponse returns a file.
type GetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{5}
}

func (x *GetFileResponse) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

// FileFilter contains filters for listing files.
type FileFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent ID to filter by. If null, all files are returned (from all directories).
	// If empty, only root files are returned. If non-empty, only files in the specified
	// directory are returned.
	ParentId *string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	// Only show favorite files and folders.
	Favorite *bool `protobuf:"varint,2,opt,name=favorite,proto3,oneof" json:"favorite,omitempty"`
	// Only show files shared with the current user (i.e. that you don't own).
	Shared *bool `protobuf:"varint,3,opt,name=shared,proto3,oneof" json:"shared,omitempty"`
}

func (x *FileFilter) Reset() {
	*x = FileFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFilter) ProtoMessage() {}

func (x *FileFilter) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFilter.ProtoReflect.Descriptor instead.
func (*FileFilter) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{6}
}

func (x *FileFilter) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FileFilter) GetFavorite() bool {
	if x != nil && x.Favorite != nil {
		return *x.Favorite
	}
	return false
}

func (x *FileFilter) GetShared() bool {
	if x != nil && x.Shared != nil {
		return *x.Shared
	}
	return false
}

// ListFilesRequest requests a list of files.
// Files will be returned in descending order of last updated time.
type ListFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter        *FileFilter          `protobuf:"bytes,1,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	Pagination    *PaginationRequest   `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	ReturnOptions *ReturnedFileOptions `protobuf:"bytes,3,opt,name=return_options,json=returnOptions,proto3,oneof" json:"return_options,omitempty"`
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{7}
}

func (x *ListFilesRequest) GetFilter() *FileFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListFilesRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListFilesRequest) GetReturnOptions() *ReturnedFileOptions {
	if x != nil {
		return x.ReturnOptions
	}
	return nil
}

// ListFilesResponse returns a list of files.
type ListFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files      []*File             `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{8}
}

func (x *ListFilesResponse) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListFilesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// CreateFileMeta contains metadata for a file. Must be passed
// at least once during a CreateFileRequest client stream, and
// the handler will ignore previous CreateFileMeta messages.
type CreateFileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId   string      `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // Can be empty for root.
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Properties *Properties `protobuf:"bytes,3,opt,name=properties,proto3,oneof" json:"properties,omitempty"`
}

func (x *CreateFileMeta) Reset() {
	*x = CreateFileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileMeta) ProtoMessage() {}

func (x *CreateFileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileMeta.ProtoReflect.Descriptor instead.
func (*CreateFileMeta) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{9}
}

func (x *CreateFileMeta) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *CreateFileMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFileMeta) GetProperties() *Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

// CreateFileRequest creates a new file.
type CreateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta          *CreateFileMeta      `protobuf:"bytes,1,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	DataChunk     []byte               `protobuf:"bytes,2,opt,name=data_chunk,json=dataChunk,proto3" json:"data_chunk,omitempty"`
	ReturnOptions *ReturnedFileOptions `protobuf:"bytes,3,opt,name=return_options,json=returnOptions,proto3,oneof" json:"return_options,omitempty"`
}

func (x *CreateFileRequest) Reset() {
	*x = CreateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRequest) ProtoMessage() {}

func (x *CreateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRequest.ProtoReflect.Descriptor instead.
func (*CreateFileRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{10}
}

func (x *CreateFileRequest) GetMeta() *CreateFileMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *CreateFileRequest) GetDataChunk() []byte {
	if x != nil {
		return x.DataChunk
	}
	return nil
}

func (x *CreateFileRequest) GetReturnOptions() *ReturnedFileOptions {
	if x != nil {
		return x.ReturnOptions
	}
	return nil
}

// CreateFileResponse returns a file.
type CreateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *CreateFileResponse) Reset() {
	*x = CreateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResponse) ProtoMessage() {}

func (x *CreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResponse.ProtoReflect.Descriptor instead.
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{11}
}

func (x *CreateFileResponse) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

// ImportFromURLRequest imports a file from a URL. The caller is required
// to pass the URL itself, and an optional parent ID (i.e. where the file
// will be stored).
type ImportFromURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string               `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ParentId      *string              `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"` // If unspecified or empty, the file will be stored in the root.
	Name          *string              `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`                         // If unspecified or empty, the file's name will be derived from the URL.
	ReturnOptions *ReturnedFileOptions `protobuf:"bytes,4,opt,name=return_options,json=returnOptions,proto3,oneof" json:"return_options,omitempty"`
	// If true, we'll try and be clever when importing the file.
	// For example, if we can find a sitemap on the page, we'll create
	// a smart folder which will sync data with the sitemap periodically.
	// By default, we just fetch the underlying file that the URL points to.
	Smart *bool `protobuf:"varint,5,opt,name=smart,proto3,oneof" json:"smart,omitempty"`
}

func (x *ImportFromURLRequest) Reset() {
	*x = ImportFromURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportFromURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFromURLRequest) ProtoMessage() {}

func (x *ImportFromURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFromURLRequest.ProtoReflect.Descriptor instead.
func (*ImportFromURLRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{12}
}

func (x *ImportFromURLRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImportFromURLRequest) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ImportFromURLRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ImportFromURLRequest) GetReturnOptions() *ReturnedFileOptions {
	if x != nil {
		return x.ReturnOptions
	}
	return nil
}

func (x *ImportFromURLRequest) GetSmart() bool {
	if x != nil && x.Smart != nil {
		return *x.Smart
	}
	return false
}

// ImportFromURLResponse returns a handle to the file. Note, the file
// may be in a pending state (i.e. named *.odl) until the import is complete.
type ImportFromURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *ImportFromURLResponse) Reset() {
	*x = ImportFromURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportFromURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFromURLResponse) ProtoMessage() {}

func (x *ImportFromURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFromURLResponse.ProtoReflect.Descriptor instead.
func (*ImportFromURLResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{13}
}

func (x *ImportFromURLResponse) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

// DeleteFileRequest deletes a file.
// Note: If the file is a shared directory that you don't own,
// deleting the file will "unsubscribe" you from the directory.
type DeleteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *FileSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *DeleteFileRequest) Reset() {
	*x = DeleteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRequest) ProtoMessage() {}

func (x *DeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteFileRequest) GetSelector() *FileSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

// DeleteFileResponse returns a file.
type DeleteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFileResponse) Reset() {
	*x = DeleteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResponse) ProtoMessage() {}

func (x *DeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{15}
}

// UpdateFileRequest updates a file.
type UpdateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector      *FileSelector        `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	ReturnOptions *ReturnedFileOptions `protobuf:"bytes,2,opt,name=return_options,json=returnOptions,proto3,oneof" json:"return_options,omitempty"`
	ParentId      *string              `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Name          *string              `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Favorite      *bool                `protobuf:"varint,5,opt,name=favorite,proto3,oneof" json:"favorite,omitempty"`
}

func (x *UpdateFileRequest) Reset() {
	*x = UpdateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFileRequest) ProtoMessage() {}

func (x *UpdateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFileRequest.ProtoReflect.Descriptor instead.
func (*UpdateFileRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateFileRequest) GetSelector() *FileSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *UpdateFileRequest) GetReturnOptions() *ReturnedFileOptions {
	if x != nil {
		return x.ReturnOptions
	}
	return nil
}

func (x *UpdateFileRequest) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *UpdateFileRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateFileRequest) GetFavorite() bool {
	if x != nil && x.Favorite != nil {
		return *x.Favorite
	}
	return false
}

// UpdateFileResponse returns a file.
type UpdateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *UpdateFileResponse) Reset() {
	*x = UpdateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFileResponse) ProtoMessage() {}

func (x *UpdateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFileResponse.ProtoReflect.Descriptor instead.
func (*UpdateFileResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateFileResponse) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

// ShareFileRequest shares a file with another user.
type ShareFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *FileSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Role     SharingRole   `protobuf:"varint,2,opt,name=role,proto3,enum=file.v1.SharingRole" json:"role,omitempty"` // Cannot be OWNER.
	// Types that are assignable to Target:
	//	*ShareFileRequest_Email
	//	*ShareFileRequest_GroupId
	Target isShareFileRequest_Target `protobuf_oneof:"target"`
}

func (x *ShareFileRequest) Reset() {
	*x = ShareFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFileRequest) ProtoMessage() {}

func (x *ShareFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFileRequest.ProtoReflect.Descriptor instead.
func (*ShareFileRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{18}
}

func (x *ShareFileRequest) GetSelector() *FileSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *ShareFileRequest) GetRole() SharingRole {
	if x != nil {
		return x.Role
	}
	return SharingRole_SHARING_ROLE_UNSPECIFIED
}

func (m *ShareFileRequest) GetTarget() isShareFileRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *ShareFileRequest) GetEmail() string {
	if x, ok := x.GetTarget().(*ShareFileRequest_Email); ok {
		return x.Email
	}
	return ""
}

func (x *ShareFileRequest) GetGroupId() string {
	if x, ok := x.GetTarget().(*ShareFileRequest_GroupId); ok {
		return x.GroupId
	}
	return ""
}

type isShareFileRequest_Target interface {
	isShareFileRequest_Target()
}

type ShareFileRequest_Email struct {
	Email string `protobuf:"bytes,3,opt,name=email,proto3,oneof"`
}

type ShareFileRequest_GroupId struct {
	GroupId string `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3,oneof"`
}

func (*ShareFileRequest_Email) isShareFileRequest_Target() {}

func (*ShareFileRequest_GroupId) isShareFileRequest_Target() {}

// ShareFileResponse is the response to a ShareFileRequest.
type ShareFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId     string      `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	SharedWith *SharedWith `protobuf:"bytes,2,opt,name=shared_with,json=sharedWith,proto3" json:"shared_with,omitempty"`
}

func (x *ShareFileResponse) Reset() {
	*x = ShareFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareFileResponse) ProtoMessage() {}

func (x *ShareFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareFileResponse.ProtoReflect.Descriptor instead.
func (*ShareFileResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{19}
}

func (x *ShareFileResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ShareFileResponse) GetSharedWith() *SharedWith {
	if x != nil {
		return x.SharedWith
	}
	return nil
}

// UnshareFileRequest deletes an existing share of a file with another user.
type UnshareFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareId string `protobuf:"bytes,1,opt,name=share_id,json=shareId,proto3" json:"share_id,omitempty"`
}

func (x *UnshareFileRequest) Reset() {
	*x = UnshareFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareFileRequest) ProtoMessage() {}

func (x *UnshareFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareFileRequest.ProtoReflect.Descriptor instead.
func (*UnshareFileRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{20}
}

func (x *UnshareFileRequest) GetShareId() string {
	if x != nil {
		return x.ShareId
	}
	return ""
}

// UnshareFileResponse is the response to a UnshareFileRequest.
type UnshareFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnshareFileResponse) Reset() {
	*x = UnshareFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnshareFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshareFileResponse) ProtoMessage() {}

func (x *UnshareFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshareFileResponse.ProtoReflect.Descriptor instead.
func (*UnshareFileResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{21}
}

// SitemapParams contains parameters for a sitemap sync.
type SitemapParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SitemapParams) Reset() {
	*x = SitemapParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SitemapParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SitemapParams) ProtoMessage() {}

func (x *SitemapParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SitemapParams.ProtoReflect.Descriptor instead.
func (*SitemapParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{22}
}

func (x *SitemapParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// RSSParams contains parameters for an RSS sync.
type RSSParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RSSParams) Reset() {
	*x = RSSParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSSParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSSParams) ProtoMessage() {}

func (x *RSSParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSSParams.ProtoReflect.Descriptor instead.
func (*RSSParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{23}
}

func (x *RSSParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// SlackParams contains parameters for a Slack sync.
type SlackParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotToken string `protobuf:"bytes,1,opt,name=bot_token,json=botToken,proto3" json:"bot_token,omitempty"` // Obtained via OAuth flow.
}

func (x *SlackParams) Reset() {
	*x = SlackParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackParams) ProtoMessage() {}

func (x *SlackParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackParams.ProtoReflect.Descriptor instead.
func (*SlackParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{24}
}

func (x *SlackParams) GetBotToken() string {
	if x != nil {
		return x.BotToken
	}
	return ""
}

// GithubRepositoryParams contains parameters for a Github repository sync.
type GithubRepositoryParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Repo  string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	// Types that are assignable to Auth:
	//	*GithubRepositoryParams_AccessToken
	//	*GithubRepositoryParams_SourceUserId
	Auth isGithubRepositoryParams_Auth `protobuf_oneof:"auth"`
}

func (x *GithubRepositoryParams) Reset() {
	*x = GithubRepositoryParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubRepositoryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRepositoryParams) ProtoMessage() {}

func (x *GithubRepositoryParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRepositoryParams.ProtoReflect.Descriptor instead.
func (*GithubRepositoryParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{25}
}

func (x *GithubRepositoryParams) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GithubRepositoryParams) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (m *GithubRepositoryParams) GetAuth() isGithubRepositoryParams_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *GithubRepositoryParams) GetAccessToken() string {
	if x, ok := x.GetAuth().(*GithubRepositoryParams_AccessToken); ok {
		return x.AccessToken
	}
	return ""
}

func (x *GithubRepositoryParams) GetSourceUserId() string {
	if x, ok := x.GetAuth().(*GithubRepositoryParams_SourceUserId); ok {
		return x.SourceUserId
	}
	return ""
}

type isGithubRepositoryParams_Auth interface {
	isGithubRepositoryParams_Auth()
}

type GithubRepositoryParams_AccessToken struct {
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3,oneof"`
}

type GithubRepositoryParams_SourceUserId struct {
	SourceUserId string `protobuf:"bytes,4,opt,name=source_user_id,json=sourceUserId,proto3,oneof"`
}

func (*GithubRepositoryParams_AccessToken) isGithubRepositoryParams_Auth() {}

func (*GithubRepositoryParams_SourceUserId) isGithubRepositoryParams_Auth() {}

// NotionParams contains parameters for a Notion sync.
type NotionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // Obtained via OAuth flow.
}

func (x *NotionParams) Reset() {
	*x = NotionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotionParams) ProtoMessage() {}

func (x *NotionParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotionParams.ProtoReflect.Descriptor instead.
func (*NotionParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{26}
}

func (x *NotionParams) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// DiscordParams contains parameters for a Discord sync.
type DiscordParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId string `protobuf:"bytes,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *DiscordParams) Reset() {
	*x = DiscordParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscordParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscordParams) ProtoMessage() {}

func (x *DiscordParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscordParams.ProtoReflect.Descriptor instead.
func (*DiscordParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{27}
}

func (x *DiscordParams) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

// LinearParams contains parameters for a Linear sync.
type LinearParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // Obtained via OAuth flow.
}

func (x *LinearParams) Reset() {
	*x = LinearParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinearParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinearParams) ProtoMessage() {}

func (x *LinearParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinearParams.ProtoReflect.Descriptor instead.
func (*LinearParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{28}
}

func (x *LinearParams) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// MeetingBotParams contains parameters for a Meeting Bot sync.
type MeetingBotParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeetingBotParams) Reset() {
	*x = MeetingBotParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeetingBotParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeetingBotParams) ProtoMessage() {}

func (x *MeetingBotParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeetingBotParams.ProtoReflect.Descriptor instead.
func (*MeetingBotParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{29}
}

// SyncParams contains parameters for a Sync.
type SyncParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Params:
	//	*SyncParams_Sitemap
	//	*SyncParams_Rss
	//	*SyncParams_Slack
	//	*SyncParams_GithubRepository
	//	*SyncParams_Notion
	//	*SyncParams_Discord
	//	*SyncParams_Linear
	//	*SyncParams_MeetingBot
	Params isSyncParams_Params `protobuf_oneof:"params"`
}

func (x *SyncParams) Reset() {
	*x = SyncParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncParams) ProtoMessage() {}

func (x *SyncParams) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncParams.ProtoReflect.Descriptor instead.
func (*SyncParams) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{30}
}

func (m *SyncParams) GetParams() isSyncParams_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *SyncParams) GetSitemap() *SitemapParams {
	if x, ok := x.GetParams().(*SyncParams_Sitemap); ok {
		return x.Sitemap
	}
	return nil
}

func (x *SyncParams) GetRss() *RSSParams {
	if x, ok := x.GetParams().(*SyncParams_Rss); ok {
		return x.Rss
	}
	return nil
}

func (x *SyncParams) GetSlack() *SlackParams {
	if x, ok := x.GetParams().(*SyncParams_Slack); ok {
		return x.Slack
	}
	return nil
}

func (x *SyncParams) GetGithubRepository() *GithubRepositoryParams {
	if x, ok := x.GetParams().(*SyncParams_GithubRepository); ok {
		return x.GithubRepository
	}
	return nil
}

func (x *SyncParams) GetNotion() *NotionParams {
	if x, ok := x.GetParams().(*SyncParams_Notion); ok {
		return x.Notion
	}
	return nil
}

func (x *SyncParams) GetDiscord() *DiscordParams {
	if x, ok := x.GetParams().(*SyncParams_Discord); ok {
		return x.Discord
	}
	return nil
}

func (x *SyncParams) GetLinear() *LinearParams {
	if x, ok := x.GetParams().(*SyncParams_Linear); ok {
		return x.Linear
	}
	return nil
}

func (x *SyncParams) GetMeetingBot() *MeetingBotParams {
	if x, ok := x.GetParams().(*SyncParams_MeetingBot); ok {
		return x.MeetingBot
	}
	return nil
}

type isSyncParams_Params interface {
	isSyncParams_Params()
}

type SyncParams_Sitemap struct {
	Sitemap *SitemapParams `protobuf:"bytes,1,opt,name=sitemap,proto3,oneof"`
}

type SyncParams_Rss struct {
	Rss *RSSParams `protobuf:"bytes,2,opt,name=rss,proto3,oneof"`
}

type SyncParams_Slack struct {
	Slack *SlackParams `protobuf:"bytes,3,opt,name=slack,proto3,oneof"`
}

type SyncParams_GithubRepository struct {
	GithubRepository *GithubRepositoryParams `protobuf:"bytes,4,opt,name=github_repository,json=githubRepository,proto3,oneof"`
}

type SyncParams_Notion struct {
	Notion *NotionParams `protobuf:"bytes,5,opt,name=notion,proto3,oneof"`
}

type SyncParams_Discord struct {
	Discord *DiscordParams `protobuf:"bytes,6,opt,name=discord,proto3,oneof"`
}

type SyncParams_Linear struct {
	Linear *LinearParams `protobuf:"bytes,7,opt,name=linear,proto3,oneof"`
}

type SyncParams_MeetingBot struct {
	MeetingBot *MeetingBotParams `protobuf:"bytes,8,opt,name=meeting_bot,json=meetingBot,proto3,oneof"`
}

func (*SyncParams_Sitemap) isSyncParams_Params() {}

func (*SyncParams_Rss) isSyncParams_Params() {}

func (*SyncParams_Slack) isSyncParams_Params() {}

func (*SyncParams_GithubRepository) isSyncParams_Params() {}

func (*SyncParams_Notion) isSyncParams_Params() {}

func (*SyncParams_Discord) isSyncParams_Params() {}

func (*SyncParams_Linear) isSyncParams_Params() {}

func (*SyncParams_MeetingBot) isSyncParams_Params() {}

// AttachSyncRequest attaches an Sync to a file.
type AttachSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *FileSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"` // Must be a folder.
	Kind     SyncKind      `protobuf:"varint,2,opt,name=kind,proto3,enum=file.v1.SyncKind" json:"kind,omitempty"`
	Params   *SyncParams   `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *AttachSyncRequest) Reset() {
	*x = AttachSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachSyncRequest) ProtoMessage() {}

func (x *AttachSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachSyncRequest.ProtoReflect.Descriptor instead.
func (*AttachSyncRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{31}
}

func (x *AttachSyncRequest) GetSelector() *FileSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *AttachSyncRequest) GetKind() SyncKind {
	if x != nil {
		return x.Kind
	}
	return SyncKind_SYNC_KIND_UNSPECIFIED
}

func (x *AttachSyncRequest) GetParams() *SyncParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Sync contains information about a sync attached to a file.
type Sync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AttachedFileId string                 `protobuf:"bytes,2,opt,name=attached_file_id,json=attachedFileId,proto3" json:"attached_file_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Creator        *v1.UserProfile        `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Kind           SyncKind               `protobuf:"varint,6,opt,name=kind,proto3,enum=file.v1.SyncKind" json:"kind,omitempty"`
	Params         *SyncParams            `protobuf:"bytes,7,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *Sync) Reset() {
	*x = Sync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sync) ProtoMessage() {}

func (x *Sync) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sync.ProtoReflect.Descriptor instead.
func (*Sync) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{32}
}

func (x *Sync) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sync) GetAttachedFileId() string {
	if x != nil {
		return x.AttachedFileId
	}
	return ""
}

func (x *Sync) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Sync) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Sync) GetCreator() *v1.UserProfile {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Sync) GetKind() SyncKind {
	if x != nil {
		return x.Kind
	}
	return SyncKind_SYNC_KIND_UNSPECIFIED
}

func (x *Sync) GetParams() *SyncParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// AttachSyncResponse returns a Sync.
type AttachSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sync *Sync `protobuf:"bytes,1,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *AttachSyncResponse) Reset() {
	*x = AttachSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachSyncResponse) ProtoMessage() {}

func (x *AttachSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachSyncResponse.ProtoReflect.Descriptor instead.
func (*AttachSyncResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{33}
}

func (x *AttachSyncResponse) GetSync() *Sync {
	if x != nil {
		return x.Sync
	}
	return nil
}

// DeleteSyncRequest deletes a Sync.
type DeleteSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSyncRequest) Reset() {
	*x = DeleteSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyncRequest) ProtoMessage() {}

func (x *DeleteSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyncRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyncRequest) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteSyncRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DeleteSyncResponse is the response to a DeleteSyncRequest.
type DeleteSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSyncResponse) Reset() {
	*x = DeleteSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyncResponse) ProtoMessage() {}

func (x *DeleteSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyncResponse.ProtoReflect.Descriptor instead.
func (*DeleteSyncResponse) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{35}
}

// TextArray is a repeated string.
type TextArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TextArray) Reset() {
	*x = TextArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextArray) ProtoMessage() {}

func (x *TextArray) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextArray.ProtoReflect.Descriptor instead.
func (*TextArray) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{36}
}

func (x *TextArray) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// NumberArray is a repeated double.
type NumberArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *NumberArray) Reset() {
	*x = NumberArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberArray) ProtoMessage() {}

func (x *NumberArray) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberArray.ProtoReflect.Descriptor instead.
func (*NumberArray) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{37}
}

func (x *NumberArray) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Property is an arbitrary key-value pair attached to a file.
// Files inherit properties from their parents, and can override
// inherited properties if needed.
type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Property_Text
	//	*Property_Number
	//	*Property_TextArray
	//	*Property_NumberArray
	Value isProperty_Value `protobuf_oneof:"value"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{38}
}

func (m *Property) GetValue() isProperty_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Property) GetText() string {
	if x, ok := x.GetValue().(*Property_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Property) GetNumber() float64 {
	if x, ok := x.GetValue().(*Property_Number); ok {
		return x.Number
	}
	return 0
}

func (x *Property) GetTextArray() *TextArray {
	if x, ok := x.GetValue().(*Property_TextArray); ok {
		return x.TextArray
	}
	return nil
}

func (x *Property) GetNumberArray() *NumberArray {
	if x, ok := x.GetValue().(*Property_NumberArray); ok {
		return x.NumberArray
	}
	return nil
}

type isProperty_Value interface {
	isProperty_Value()
}

type Property_Text struct {
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type Property_Number struct {
	Number float64 `protobuf:"fixed64,3,opt,name=number,proto3,oneof"`
}

type Property_TextArray struct {
	TextArray *TextArray `protobuf:"bytes,4,opt,name=text_array,json=textArray,proto3,oneof"`
}

type Property_NumberArray struct {
	NumberArray *NumberArray `protobuf:"bytes,5,opt,name=number_array,json=numberArray,proto3,oneof"`
}

func (*Property_Text) isProperty_Value() {}

func (*Property_Number) isProperty_Value() {}

func (*Property_TextArray) isProperty_Value() {}

func (*Property_NumberArray) isProperty_Value() {}

// Properties is a set of properties.
type Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties map[string]*Property `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Properties) Reset() {
	*x = Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Properties) ProtoMessage() {}

func (x *Properties) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Properties.ProtoReflect.Descriptor instead.
func (*Properties) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{39}
}

func (x *Properties) GetProperties() map[string]*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// SharedWith contains information about a file shared with another user.
type SharedWith struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Role SharingRole `protobuf:"varint,2,opt,name=role,proto3,enum=file.v1.SharingRole" json:"role,omitempty"`
	// Types that are assignable to Tenant:
	//	*SharedWith_User
	//	*SharedWith_Group
	Tenant isSharedWith_Tenant `protobuf_oneof:"tenant"`
}

func (x *SharedWith) Reset() {
	*x = SharedWith{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedWith) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedWith) ProtoMessage() {}

func (x *SharedWith) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedWith.ProtoReflect.Descriptor instead.
func (*SharedWith) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{40}
}

func (x *SharedWith) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SharedWith) GetRole() SharingRole {
	if x != nil {
		return x.Role
	}
	return SharingRole_SHARING_ROLE_UNSPECIFIED
}

func (m *SharedWith) GetTenant() isSharedWith_Tenant {
	if m != nil {
		return m.Tenant
	}
	return nil
}

func (x *SharedWith) GetUser() *v1.UserProfile {
	if x, ok := x.GetTenant().(*SharedWith_User); ok {
		return x.User
	}
	return nil
}

func (x *SharedWith) GetGroup() *v1.GroupProfile {
	if x, ok := x.GetTenant().(*SharedWith_Group); ok {
		return x.Group
	}
	return nil
}

type isSharedWith_Tenant interface {
	isSharedWith_Tenant()
}

type SharedWith_User struct {
	User *v1.UserProfile `protobuf:"bytes,3,opt,name=user,proto3,oneof"`
}

type SharedWith_Group struct {
	Group *v1.GroupProfile `protobuf:"bytes,4,opt,name=group,proto3,oneof"`
}

func (*SharedWith_User) isSharedWith_Tenant() {}

func (*SharedWith_Group) isSharedWith_Tenant() {}

// File is the core data structure for files, and can represent
// both a traditional file as well as a directory. Directories are
// null-sized files (i.e. size_bytes not set).
type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId       *string                `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LastAccessedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_accessed_at,json=lastAccessedAt,proto3" json:"last_accessed_at,omitempty"`
	IndexingStatus IndexingStatus         `protobuf:"varint,6,opt,name=indexing_status,json=indexingStatus,proto3,enum=file.v1.IndexingStatus" json:"indexing_status,omitempty"`
	Creator        *v1.UserProfile        `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	Role           SharingRole            `protobuf:"varint,8,opt,name=role,proto3,enum=file.v1.SharingRole" json:"role,omitempty"`
	SizeBytes      *int64                 `protobuf:"varint,9,opt,name=size_bytes,json=sizeBytes,proto3,oneof" json:"size_bytes,omitempty"`
	Name           string                 `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	DownloadUrl    string                 `protobuf:"bytes,11,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"` // If folder, returns a zip file.
	Properties     *Properties            `protobuf:"bytes,12,opt,name=properties,proto3" json:"properties,omitempty"`
	Parents        []*File                `protobuf:"bytes,13,rep,name=parents,proto3" json:"parents,omitempty"`                         // Only populated if requested via GetFileRequest.
	SharedWith     []*SharedWith          `protobuf:"bytes,14,rep,name=shared_with,json=sharedWith,proto3" json:"shared_with,omitempty"` // Only populated if file is a folder and you're the owner.
	Sync           *Sync                  `protobuf:"bytes,15,opt,name=sync,proto3,oneof" json:"sync,omitempty"`                         // Only populated if file has attached Sync.
	Favorite       bool                   `protobuf:"varint,16,opt,name=favorite,proto3" json:"favorite,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{41}
}

func (x *File) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *File) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *File) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *File) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *File) GetLastAccessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccessedAt
	}
	return nil
}

func (x *File) GetIndexingStatus() IndexingStatus {
	if x != nil {
		return x.IndexingStatus
	}
	return IndexingStatus_INDEXING_STATUS_UNSPECIFIED
}

func (x *File) GetCreator() *v1.UserProfile {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *File) GetRole() SharingRole {
	if x != nil {
		return x.Role
	}
	return SharingRole_SHARING_ROLE_UNSPECIFIED
}

func (x *File) GetSizeBytes() int64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *File) GetProperties() *Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *File) GetParents() []*File {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *File) GetSharedWith() []*SharedWith {
	if x != nil {
		return x.SharedWith
	}
	return nil
}

func (x *File) GetSync() *Sync {
	if x != nil {
		return x.Sync
	}
	return nil
}

func (x *File) GetFavorite() bool {
	if x != nil {
		return x.Favorite
	}
	return false
}

type FileSelector_ByName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId *string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"` // Defaults to root if empty or null.
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FileSelector_ByName) Reset() {
	*x = FileSelector_ByName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_v1_file_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSelector_ByName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSelector_ByName) ProtoMessage() {}

func (x *FileSelector_ByName) ProtoReflect() protoreflect.Message {
	mi := &file_file_v1_file_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSelector_ByName.ProtoReflect.Descriptor instead.
func (*FileSelector_ByName) Descriptor() ([]byte, []int) {
	return file_file_v1_file_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FileSelector_ByName) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FileSelector_ByName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_file_v1_file_proto protoreflect.FileDescriptor

var file_file_v1_file_proto_rawDesc = []byte{
	0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22,
	0x3e, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xb3, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4c, 0x0a, 0x06, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x75, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x48, 0x0a,
	0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xfc, 0x01, 0x0a,
	0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x22, 0x3a, 0x0a, 0x15, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x48,
	0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x62, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x22, 0x2f, 0x0a, 0x12, 0x55, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x6e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x0a, 0x0d, 0x53, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x1d, 0x0a, 0x09, 0x52, 0x53, 0x53, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x2a, 0x0a, 0x0b, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x97, 0x01, 0x0a, 0x16, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x2a, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x0c, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x12,
	0x0a, 0x10, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xc4, 0x03, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74,
	0x65, 0x6d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69,
	0x74, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x53, 0x53,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x03, 0x72, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x4e, 0x0a, 0x11, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x10, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x30, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x23,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x09, 0x54, 0x65, 0x78,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x25,
	0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x50, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x22, 0xeb, 0x05, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x48, 0x02, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x2a, 0x75, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xe3, 0x01, 0x0a, 0x08, 0x53, 0x79, 0x6e,
	0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x49,
	0x54, 0x45, 0x4d, 0x41, 0x50, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x53, 0x53, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59,
	0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x49, 0x54,
	0x48, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41,
	0x52, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x4d, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4f, 0x54, 0x10, 0x08, 0x2a, 0xc3,
	0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x32, 0xe6, 0x05, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x17, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x50, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x55, 0x52, 0x4c, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x82, 0x01,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x63, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x66, 0x69, 0x6c, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x07,
	0x46, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_file_v1_file_proto_rawDescOnce sync.Once
	file_file_v1_file_proto_rawDescData = file_file_v1_file_proto_rawDesc
)

func file_file_v1_file_proto_rawDescGZIP() []byte {
	file_file_v1_file_proto_rawDescOnce.Do(func() {
		file_file_v1_file_proto_rawDescData = protoimpl.X.CompressGZIP(file_file_v1_file_proto_rawDescData)
	})
	return file_file_v1_file_proto_rawDescData
}

var file_file_v1_file_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_file_v1_file_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_file_v1_file_proto_goTypes = []interface{}{
	(SharingRole)(0),               // 0: file.v1.SharingRole
	(SyncKind)(0),                  // 1: file.v1.SyncKind
	(IndexingStatus)(0),            // 2: file.v1.IndexingStatus
	(*PaginationRequest)(nil),      // 3: file.v1.PaginationRequest
	(*PaginationResponse)(nil),     // 4: file.v1.PaginationResponse
	(*ReturnedFileOptions)(nil),    // 5: file.v1.ReturnedFileOptions
	(*FileSelector)(nil),           // 6: file.v1.FileSelector
	(*GetFileRequest)(nil),         // 7: file.v1.GetFileRequest
	(*GetFileResponse)(nil),        // 8: file.v1.GetFileResponse
	(*FileFilter)(nil),             // 9: file.v1.FileFilter
	(*ListFilesRequest)(nil),       // 10: file.v1.ListFilesRequest
	(*ListFilesResponse)(nil),      // 11: file.v1.ListFilesResponse
	(*CreateFileMeta)(nil),         // 12: file.v1.CreateFileMeta
	(*CreateFileRequest)(nil),      // 13: file.v1.CreateFileRequest
	(*CreateFileResponse)(nil),     // 14: file.v1.CreateFileResponse
	(*ImportFromURLRequest)(nil),   // 15: file.v1.ImportFromURLRequest
	(*ImportFromURLResponse)(nil),  // 16: file.v1.ImportFromURLResponse
	(*DeleteFileRequest)(nil),      // 17: file.v1.DeleteFileRequest
	(*DeleteFileResponse)(nil),     // 18: file.v1.DeleteFileResponse
	(*UpdateFileRequest)(nil),      // 19: file.v1.UpdateFileRequest
	(*UpdateFileResponse)(nil),     // 20: file.v1.UpdateFileResponse
	(*ShareFileRequest)(nil),       // 21: file.v1.ShareFileRequest
	(*ShareFileResponse)(nil),      // 22: file.v1.ShareFileResponse
	(*UnshareFileRequest)(nil),     // 23: file.v1.UnshareFileRequest
	(*UnshareFileResponse)(nil),    // 24: file.v1.UnshareFileResponse
	(*SitemapParams)(nil),          // 25: file.v1.SitemapParams
	(*RSSParams)(nil),              // 26: file.v1.RSSParams
	(*SlackParams)(nil),            // 27: file.v1.SlackParams
	(*GithubRepositoryParams)(nil), // 28: file.v1.GithubRepositoryParams
	(*NotionParams)(nil),           // 29: file.v1.NotionParams
	(*DiscordParams)(nil),          // 30: file.v1.DiscordParams
	(*LinearParams)(nil),           // 31: file.v1.LinearParams
	(*MeetingBotParams)(nil),       // 32: file.v1.MeetingBotParams
	(*SyncParams)(nil),             // 33: file.v1.SyncParams
	(*AttachSyncRequest)(nil),      // 34: file.v1.AttachSyncRequest
	(*Sync)(nil),                   // 35: file.v1.Sync
	(*AttachSyncResponse)(nil),     // 36: file.v1.AttachSyncResponse
	(*DeleteSyncRequest)(nil),      // 37: file.v1.DeleteSyncRequest
	(*DeleteSyncResponse)(nil),     // 38: file.v1.DeleteSyncResponse
	(*TextArray)(nil),              // 39: file.v1.TextArray
	(*NumberArray)(nil),            // 40: file.v1.NumberArray
	(*Property)(nil),               // 41: file.v1.Property
	(*Properties)(nil),             // 42: file.v1.Properties
	(*SharedWith)(nil),             // 43: file.v1.SharedWith
	(*File)(nil),                   // 44: file.v1.File
	(*FileSelector_ByName)(nil),    // 45: file.v1.FileSelector.ByName
	nil,                            // 46: file.v1.Properties.PropertiesEntry
	(*timestamppb.Timestamp)(nil),  // 47: google.protobuf.Timestamp
	(*v1.UserProfile)(nil),         // 48: tenant.v1.UserProfile
	(*v1.GroupProfile)(nil),        // 49: tenant.v1.GroupProfile
}
var file_file_v1_file_proto_depIdxs = []int32{
	45, // 0: file.v1.FileSelector.by_name:type_name -> file.v1.FileSelector.ByName
	6,  // 1: file.v1.GetFileRequest.selector:type_name -> file.v1.FileSelector
	5,  // 2: file.v1.GetFileRequest.return_options:type_name -> file.v1.ReturnedFileOptions
	44, // 3: file.v1.GetFileResponse.file:type_name -> file.v1.File
	9,  // 4: file.v1.ListFilesRequest.filter:type_name -> file.v1.FileFilter
	3,  // 5: file.v1.ListFilesRequest.pagination:type_name -> file.v1.PaginationRequest
	5,  // 6: file.v1.ListFilesRequest.return_options:type_name -> file.v1.ReturnedFileOptions
	44, // 7: file.v1.ListFilesResponse.files:type_name -> file.v1.File
	4,  // 8: file.v1.ListFilesResponse.pagination:type_name -> file.v1.PaginationResponse
	42, // 9: file.v1.CreateFileMeta.properties:type_name -> file.v1.Properties
	12, // 10: file.v1.CreateFileRequest.meta:type_name -> file.v1.CreateFileMeta
	5,  // 11: file.v1.CreateFileRequest.return_options:type_name -> file.v1.ReturnedFileOptions
	44, // 12: file.v1.CreateFileResponse.file:type_name -> file.v1.File
	5,  // 13: file.v1.ImportFromURLRequest.return_options:type_name -> file.v1.ReturnedFileOptions
	44, // 14: file.v1.ImportFromURLResponse.file:type_name -> file.v1.File
	6,  // 15: file.v1.DeleteFileRequest.selector:type_name -> file.v1.FileSelector
	6,  // 16: file.v1.UpdateFileRequest.selector:type_name -> file.v1.FileSelector
	5,  // 17: file.v1.UpdateFileRequest.return_options:type_name -> file.v1.ReturnedFileOptions
	44, // 18: file.v1.UpdateFileResponse.file:type_name -> file.v1.File
	6,  // 19: file.v1.ShareFileRequest.selector:type_name -> file.v1.FileSelector
	0,  // 20: file.v1.ShareFileRequest.role:type_name -> file.v1.SharingRole
	43, // 21: file.v1.ShareFileResponse.shared_with:type_name -> file.v1.SharedWith
	25, // 22: file.v1.SyncParams.sitemap:type_name -> file.v1.SitemapParams
	26, // 23: file.v1.SyncParams.rss:type_name -> file.v1.RSSParams
	27, // 24: file.v1.SyncParams.slack:type_name -> file.v1.SlackParams
	28, // 25: file.v1.SyncParams.github_repository:type_name -> file.v1.GithubRepositoryParams
	29, // 26: file.v1.SyncParams.notion:type_name -> file.v1.NotionParams
	30, // 27: file.v1.SyncParams.discord:type_name -> file.v1.DiscordParams
	31, // 28: file.v1.SyncParams.linear:type_name -> file.v1.LinearParams
	32, // 29: file.v1.SyncParams.meeting_bot:type_name -> file.v1.MeetingBotParams
	6,  // 30: file.v1.AttachSyncRequest.selector:type_name -> file.v1.FileSelector
	1,  // 31: file.v1.AttachSyncRequest.kind:type_name -> file.v1.SyncKind
	33, // 32: file.v1.AttachSyncRequest.params:type_name -> file.v1.SyncParams
	47, // 33: file.v1.Sync.created_at:type_name -> google.protobuf.Timestamp
	47, // 34: file.v1.Sync.updated_at:type_name -> google.protobuf.Timestamp
	48, // 35: file.v1.Sync.creator:type_name -> tenant.v1.UserProfile
	1,  // 36: file.v1.Sync.kind:type_name -> file.v1.SyncKind
	33, // 37: file.v1.Sync.params:type_name -> file.v1.SyncParams
	35, // 38: file.v1.AttachSyncResponse.sync:type_name -> file.v1.Sync
	39, // 39: file.v1.Property.text_array:type_name -> file.v1.TextArray
	40, // 40: file.v1.Property.number_array:type_name -> file.v1.NumberArray
	46, // 41: file.v1.Properties.properties:type_name -> file.v1.Properties.PropertiesEntry
	0,  // 42: file.v1.SharedWith.role:type_name -> file.v1.SharingRole
	48, // 43: file.v1.SharedWith.user:type_name -> tenant.v1.UserProfile
	49, // 44: file.v1.SharedWith.group:type_name -> tenant.v1.GroupProfile
	47, // 45: file.v1.File.created_at:type_name -> google.protobuf.Timestamp
	47, // 46: file.v1.File.updated_at:type_name -> google.protobuf.Timestamp
	47, // 47: file.v1.File.last_accessed_at:type_name -> google.protobuf.Timestamp
	2,  // 48: file.v1.File.indexing_status:type_name -> file.v1.IndexingStatus
	48, // 49: file.v1.File.creator:type_name -> tenant.v1.UserProfile
	0,  // 50: file.v1.File.role:type_name -> file.v1.SharingRole
	42, // 51: file.v1.File.properties:type_name -> file.v1.Properties
	44, // 52: file.v1.File.parents:type_name -> file.v1.File
	43, // 53: file.v1.File.shared_with:type_name -> file.v1.SharedWith
	35, // 54: file.v1.File.sync:type_name -> file.v1.Sync
	41, // 55: file.v1.Properties.PropertiesEntry.value:type_name -> file.v1.Property
	7,  // 56: file.v1.FileService.GetFile:input_type -> file.v1.GetFileRequest
	10, // 57: file.v1.FileService.ListFiles:input_type -> file.v1.ListFilesRequest
	13, // 58: file.v1.FileService.CreateFile:input_type -> file.v1.CreateFileRequest
	15, // 59: file.v1.FileService.ImportFromURL:input_type -> file.v1.ImportFromURLRequest
	17, // 60: file.v1.FileService.DeleteFile:input_type -> file.v1.DeleteFileRequest
	19, // 61: file.v1.FileService.UpdateFile:input_type -> file.v1.UpdateFileRequest
	21, // 62: file.v1.FileService.ShareFile:input_type -> file.v1.ShareFileRequest
	23, // 63: file.v1.FileService.UnshareFile:input_type -> file.v1.UnshareFileRequest
	34, // 64: file.v1.FileService.AttachSync:input_type -> file.v1.AttachSyncRequest
	37, // 65: file.v1.FileService.DeleteSync:input_type -> file.v1.DeleteSyncRequest
	8,  // 66: file.v1.FileService.GetFile:output_type -> file.v1.GetFileResponse
	11, // 67: file.v1.FileService.ListFiles:output_type -> file.v1.ListFilesResponse
	14, // 68: file.v1.FileService.CreateFile:output_type -> file.v1.CreateFileResponse
	16, // 69: file.v1.FileService.ImportFromURL:output_type -> file.v1.ImportFromURLResponse
	18, // 70: file.v1.FileService.DeleteFile:output_type -> file.v1.DeleteFileResponse
	20, // 71: file.v1.FileService.UpdateFile:output_type -> file.v1.UpdateFileResponse
	22, // 72: file.v1.FileService.ShareFile:output_type -> file.v1.ShareFileResponse
	24, // 73: file.v1.FileService.UnshareFile:output_type -> file.v1.UnshareFileResponse
	36, // 74: file.v1.FileService.AttachSync:output_type -> file.v1.AttachSyncResponse
	38, // 75: file.v1.FileService.DeleteSync:output_type -> file.v1.DeleteSyncResponse
	66, // [66:76] is the sub-list for method output_type
	56, // [56:66] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_file_v1_file_proto_init() }
func file_file_v1_file_proto_init() {
	if File_file_v1_file_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_file_v1_file_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnedFileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportFromURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportFromURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnshareFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SitemapParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RSSParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubRepositoryParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscordParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinearParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeetingBotParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedWith); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_v1_file_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSelector_ByName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_file_v1_file_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FileSelector_Id)(nil),
		(*FileSelector_ByName_)(nil),
	}
	file_file_v1_file_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ShareFileRequest_Email)(nil),
		(*ShareFileRequest_GroupId)(nil),
	}
	file_file_v1_file_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*GithubRepositoryParams_AccessToken)(nil),
		(*GithubRepositoryParams_SourceUserId)(nil),
	}
	file_file_v1_file_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*SyncParams_Sitemap)(nil),
		(*SyncParams_Rss)(nil),
		(*SyncParams_Slack)(nil),
		(*SyncParams_GithubRepository)(nil),
		(*SyncParams_Notion)(nil),
		(*SyncParams_Discord)(nil),
		(*SyncParams_Linear)(nil),
		(*SyncParams_MeetingBot)(nil),
	}
	file_file_v1_file_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*Property_Text)(nil),
		(*Property_Number)(nil),
		(*Property_TextArray)(nil),
		(*Property_NumberArray)(nil),
	}
	file_file_v1_file_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*SharedWith_User)(nil),
		(*SharedWith_Group)(nil),
	}
	file_file_v1_file_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_file_v1_file_proto_msgTypes[42].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_file_v1_file_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_file_v1_file_proto_goTypes,
		DependencyIndexes: file_file_v1_file_proto_depIdxs,
		EnumInfos:         file_file_v1_file_proto_enumTypes,
		MessageInfos:      file_file_v1_file_proto_msgTypes,
	}.Build()
	File_file_v1_file_proto = out.File
	file_file_v1_file_proto_rawDesc = nil
	file_file_v1_file_proto_goTypes = nil
	file_file_v1_file_proto_depIdxs = nil
}
