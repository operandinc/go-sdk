// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tenant/v1/tenant.proto

package tenantv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/operandinc/go-sdk/tenant/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TenantServiceName is the fully-qualified name of the TenantService service.
	TenantServiceName = "tenant.v1.TenantService"
)

// TenantServiceClient is a client for the tenant.v1.TenantService service.
type TenantServiceClient interface {
	// AuthorizedUser returns the user that's currently authorized.
	// This can be used to check if the user is logged in.
	AuthorizedUser(context.Context, *connect_go.Request[v1.AuthorizedUserRequest]) (*connect_go.Response[v1.AuthorizedUserResponse], error)
	// CreateAPIKey creates a new API key for the authorized user.
	CreateAPIKey(context.Context, *connect_go.Request[v1.CreateAPIKeyRequest]) (*connect_go.Response[v1.CreateAPIKeyResponse], error)
	// ListAPIKeys lists the API keys for the authorized user.
	ListAPIKeys(context.Context, *connect_go.Request[v1.ListAPIKeysRequest]) (*connect_go.Response[v1.ListAPIKeysResponse], error)
	// DeleteAPIKey deletes an API key for the authorized user.
	DeleteAPIKey(context.Context, *connect_go.Request[v1.DeleteAPIKeyRequest]) (*connect_go.Response[v1.DeleteAPIKeyResponse], error)
	// OAuthLink allows users to make a number of links to external services.
	// For any given provider, this endpoint may return a setup URL that the
	// user can visit to authorize the service, or an object describing the
	// current state of the link.
	OAuthLink(context.Context, *connect_go.Request[v1.OAuthLinkRequest]) (*connect_go.Response[v1.OAuthLinkResponse], error)
	// UpdateUser updates the user's profile.
	UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserRequest]) (*connect_go.Response[v1.UpdateUserResponse], error)
	// Usage queries the users usage statistics for the current period.
	Usage(context.Context, *connect_go.Request[v1.UsageRequest]) (*connect_go.Response[v1.UsageResponse], error)
	// UpdateSubscription updates the user's subscription.
	UpdateSubscription(context.Context, *connect_go.Request[v1.UpdateSubscriptionRequest]) (*connect_go.Response[v1.UpdateSubscriptionResponse], error)
}

// NewTenantServiceClient constructs a client for the tenant.v1.TenantService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TenantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tenantServiceClient{
		authorizedUser: connect_go.NewClient[v1.AuthorizedUserRequest, v1.AuthorizedUserResponse](
			httpClient,
			baseURL+"/tenant.v1.TenantService/AuthorizedUser",
			opts...,
		),
		createAPIKey: connect_go.NewClient[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse](
			httpClient,
			baseURL+"/tenant.v1.TenantService/CreateAPIKey",
			opts...,
		),
		listAPIKeys: connect_go.NewClient[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse](
			httpClient,
			baseURL+"/tenant.v1.TenantService/ListAPIKeys",
			opts...,
		),
		deleteAPIKey: connect_go.NewClient[v1.DeleteAPIKeyRequest, v1.DeleteAPIKeyResponse](
			httpClient,
			baseURL+"/tenant.v1.TenantService/DeleteAPIKey",
			opts...,
		),
		oAuthLink: connect_go.NewClient[v1.OAuthLinkRequest, v1.OAuthLinkResponse](
			httpClient,
			baseURL+"/tenant.v1.TenantService/OAuthLink",
			opts...,
		),
		updateUser: connect_go.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+"/tenant.v1.TenantService/UpdateUser",
			opts...,
		),
		usage: connect_go.NewClient[v1.UsageRequest, v1.UsageResponse](
			httpClient,
			baseURL+"/tenant.v1.TenantService/Usage",
			opts...,
		),
		updateSubscription: connect_go.NewClient[v1.UpdateSubscriptionRequest, v1.UpdateSubscriptionResponse](
			httpClient,
			baseURL+"/tenant.v1.TenantService/UpdateSubscription",
			opts...,
		),
	}
}

// tenantServiceClient implements TenantServiceClient.
type tenantServiceClient struct {
	authorizedUser     *connect_go.Client[v1.AuthorizedUserRequest, v1.AuthorizedUserResponse]
	createAPIKey       *connect_go.Client[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse]
	listAPIKeys        *connect_go.Client[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse]
	deleteAPIKey       *connect_go.Client[v1.DeleteAPIKeyRequest, v1.DeleteAPIKeyResponse]
	oAuthLink          *connect_go.Client[v1.OAuthLinkRequest, v1.OAuthLinkResponse]
	updateUser         *connect_go.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	usage              *connect_go.Client[v1.UsageRequest, v1.UsageResponse]
	updateSubscription *connect_go.Client[v1.UpdateSubscriptionRequest, v1.UpdateSubscriptionResponse]
}

// AuthorizedUser calls tenant.v1.TenantService.AuthorizedUser.
func (c *tenantServiceClient) AuthorizedUser(ctx context.Context, req *connect_go.Request[v1.AuthorizedUserRequest]) (*connect_go.Response[v1.AuthorizedUserResponse], error) {
	return c.authorizedUser.CallUnary(ctx, req)
}

// CreateAPIKey calls tenant.v1.TenantService.CreateAPIKey.
func (c *tenantServiceClient) CreateAPIKey(ctx context.Context, req *connect_go.Request[v1.CreateAPIKeyRequest]) (*connect_go.Response[v1.CreateAPIKeyResponse], error) {
	return c.createAPIKey.CallUnary(ctx, req)
}

// ListAPIKeys calls tenant.v1.TenantService.ListAPIKeys.
func (c *tenantServiceClient) ListAPIKeys(ctx context.Context, req *connect_go.Request[v1.ListAPIKeysRequest]) (*connect_go.Response[v1.ListAPIKeysResponse], error) {
	return c.listAPIKeys.CallUnary(ctx, req)
}

// DeleteAPIKey calls tenant.v1.TenantService.DeleteAPIKey.
func (c *tenantServiceClient) DeleteAPIKey(ctx context.Context, req *connect_go.Request[v1.DeleteAPIKeyRequest]) (*connect_go.Response[v1.DeleteAPIKeyResponse], error) {
	return c.deleteAPIKey.CallUnary(ctx, req)
}

// OAuthLink calls tenant.v1.TenantService.OAuthLink.
func (c *tenantServiceClient) OAuthLink(ctx context.Context, req *connect_go.Request[v1.OAuthLinkRequest]) (*connect_go.Response[v1.OAuthLinkResponse], error) {
	return c.oAuthLink.CallUnary(ctx, req)
}

// UpdateUser calls tenant.v1.TenantService.UpdateUser.
func (c *tenantServiceClient) UpdateUser(ctx context.Context, req *connect_go.Request[v1.UpdateUserRequest]) (*connect_go.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// Usage calls tenant.v1.TenantService.Usage.
func (c *tenantServiceClient) Usage(ctx context.Context, req *connect_go.Request[v1.UsageRequest]) (*connect_go.Response[v1.UsageResponse], error) {
	return c.usage.CallUnary(ctx, req)
}

// UpdateSubscription calls tenant.v1.TenantService.UpdateSubscription.
func (c *tenantServiceClient) UpdateSubscription(ctx context.Context, req *connect_go.Request[v1.UpdateSubscriptionRequest]) (*connect_go.Response[v1.UpdateSubscriptionResponse], error) {
	return c.updateSubscription.CallUnary(ctx, req)
}

// TenantServiceHandler is an implementation of the tenant.v1.TenantService service.
type TenantServiceHandler interface {
	// AuthorizedUser returns the user that's currently authorized.
	// This can be used to check if the user is logged in.
	AuthorizedUser(context.Context, *connect_go.Request[v1.AuthorizedUserRequest]) (*connect_go.Response[v1.AuthorizedUserResponse], error)
	// CreateAPIKey creates a new API key for the authorized user.
	CreateAPIKey(context.Context, *connect_go.Request[v1.CreateAPIKeyRequest]) (*connect_go.Response[v1.CreateAPIKeyResponse], error)
	// ListAPIKeys lists the API keys for the authorized user.
	ListAPIKeys(context.Context, *connect_go.Request[v1.ListAPIKeysRequest]) (*connect_go.Response[v1.ListAPIKeysResponse], error)
	// DeleteAPIKey deletes an API key for the authorized user.
	DeleteAPIKey(context.Context, *connect_go.Request[v1.DeleteAPIKeyRequest]) (*connect_go.Response[v1.DeleteAPIKeyResponse], error)
	// OAuthLink allows users to make a number of links to external services.
	// For any given provider, this endpoint may return a setup URL that the
	// user can visit to authorize the service, or an object describing the
	// current state of the link.
	OAuthLink(context.Context, *connect_go.Request[v1.OAuthLinkRequest]) (*connect_go.Response[v1.OAuthLinkResponse], error)
	// UpdateUser updates the user's profile.
	UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserRequest]) (*connect_go.Response[v1.UpdateUserResponse], error)
	// Usage queries the users usage statistics for the current period.
	Usage(context.Context, *connect_go.Request[v1.UsageRequest]) (*connect_go.Response[v1.UsageResponse], error)
	// UpdateSubscription updates the user's subscription.
	UpdateSubscription(context.Context, *connect_go.Request[v1.UpdateSubscriptionRequest]) (*connect_go.Response[v1.UpdateSubscriptionResponse], error)
}

// NewTenantServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantServiceHandler(svc TenantServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tenant.v1.TenantService/AuthorizedUser", connect_go.NewUnaryHandler(
		"/tenant.v1.TenantService/AuthorizedUser",
		svc.AuthorizedUser,
		opts...,
	))
	mux.Handle("/tenant.v1.TenantService/CreateAPIKey", connect_go.NewUnaryHandler(
		"/tenant.v1.TenantService/CreateAPIKey",
		svc.CreateAPIKey,
		opts...,
	))
	mux.Handle("/tenant.v1.TenantService/ListAPIKeys", connect_go.NewUnaryHandler(
		"/tenant.v1.TenantService/ListAPIKeys",
		svc.ListAPIKeys,
		opts...,
	))
	mux.Handle("/tenant.v1.TenantService/DeleteAPIKey", connect_go.NewUnaryHandler(
		"/tenant.v1.TenantService/DeleteAPIKey",
		svc.DeleteAPIKey,
		opts...,
	))
	mux.Handle("/tenant.v1.TenantService/OAuthLink", connect_go.NewUnaryHandler(
		"/tenant.v1.TenantService/OAuthLink",
		svc.OAuthLink,
		opts...,
	))
	mux.Handle("/tenant.v1.TenantService/UpdateUser", connect_go.NewUnaryHandler(
		"/tenant.v1.TenantService/UpdateUser",
		svc.UpdateUser,
		opts...,
	))
	mux.Handle("/tenant.v1.TenantService/Usage", connect_go.NewUnaryHandler(
		"/tenant.v1.TenantService/Usage",
		svc.Usage,
		opts...,
	))
	mux.Handle("/tenant.v1.TenantService/UpdateSubscription", connect_go.NewUnaryHandler(
		"/tenant.v1.TenantService/UpdateSubscription",
		svc.UpdateSubscription,
		opts...,
	))
	return "/tenant.v1.TenantService/", mux
}

// UnimplementedTenantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantServiceHandler struct{}

func (UnimplementedTenantServiceHandler) AuthorizedUser(context.Context, *connect_go.Request[v1.AuthorizedUserRequest]) (*connect_go.Response[v1.AuthorizedUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tenant.v1.TenantService.AuthorizedUser is not implemented"))
}

func (UnimplementedTenantServiceHandler) CreateAPIKey(context.Context, *connect_go.Request[v1.CreateAPIKeyRequest]) (*connect_go.Response[v1.CreateAPIKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tenant.v1.TenantService.CreateAPIKey is not implemented"))
}

func (UnimplementedTenantServiceHandler) ListAPIKeys(context.Context, *connect_go.Request[v1.ListAPIKeysRequest]) (*connect_go.Response[v1.ListAPIKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tenant.v1.TenantService.ListAPIKeys is not implemented"))
}

func (UnimplementedTenantServiceHandler) DeleteAPIKey(context.Context, *connect_go.Request[v1.DeleteAPIKeyRequest]) (*connect_go.Response[v1.DeleteAPIKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tenant.v1.TenantService.DeleteAPIKey is not implemented"))
}

func (UnimplementedTenantServiceHandler) OAuthLink(context.Context, *connect_go.Request[v1.OAuthLinkRequest]) (*connect_go.Response[v1.OAuthLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tenant.v1.TenantService.OAuthLink is not implemented"))
}

func (UnimplementedTenantServiceHandler) UpdateUser(context.Context, *connect_go.Request[v1.UpdateUserRequest]) (*connect_go.Response[v1.UpdateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tenant.v1.TenantService.UpdateUser is not implemented"))
}

func (UnimplementedTenantServiceHandler) Usage(context.Context, *connect_go.Request[v1.UsageRequest]) (*connect_go.Response[v1.UsageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tenant.v1.TenantService.Usage is not implemented"))
}

func (UnimplementedTenantServiceHandler) UpdateSubscription(context.Context, *connect_go.Request[v1.UpdateSubscriptionRequest]) (*connect_go.Response[v1.UpdateSubscriptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tenant.v1.TenantService.UpdateSubscription is not implemented"))
}
