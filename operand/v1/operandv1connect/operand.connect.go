// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: operand/v1/operand.proto

package operandv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/operandinc/go-sdk/operand/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OperandServiceName is the fully-qualified name of the OperandService service.
	OperandServiceName = "operand.v1.OperandService"
)

// OperandServiceClient is a client for the operand.v1.OperandService service.
type OperandServiceClient interface {
	// Search returns a list of snippets that match the given query, along with
	// all the relevant files that contain the snippets.
	Search(context.Context, *connect_go.Request[v1.SearchRequest]) (*connect_go.Response[v1.SearchResponse], error)
	// Converse exposes a chatbot with knowledge backed by the content
	// of uploaded files. Each conversation is associated with a unique
	// identifier, which can be passed in again to continue the conversation.
	Converse(context.Context, *connect_go.Request[v1.ConverseRequest]) (*connect_go.ServerStreamForClient[v1.ConverseResponse], error)
}

// NewOperandServiceClient constructs a client for the operand.v1.OperandService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOperandServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OperandServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &operandServiceClient{
		search: connect_go.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+"/operand.v1.OperandService/Search",
			opts...,
		),
		converse: connect_go.NewClient[v1.ConverseRequest, v1.ConverseResponse](
			httpClient,
			baseURL+"/operand.v1.OperandService/Converse",
			opts...,
		),
	}
}

// operandServiceClient implements OperandServiceClient.
type operandServiceClient struct {
	search   *connect_go.Client[v1.SearchRequest, v1.SearchResponse]
	converse *connect_go.Client[v1.ConverseRequest, v1.ConverseResponse]
}

// Search calls operand.v1.OperandService.Search.
func (c *operandServiceClient) Search(ctx context.Context, req *connect_go.Request[v1.SearchRequest]) (*connect_go.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// Converse calls operand.v1.OperandService.Converse.
func (c *operandServiceClient) Converse(ctx context.Context, req *connect_go.Request[v1.ConverseRequest]) (*connect_go.ServerStreamForClient[v1.ConverseResponse], error) {
	return c.converse.CallServerStream(ctx, req)
}

// OperandServiceHandler is an implementation of the operand.v1.OperandService service.
type OperandServiceHandler interface {
	// Search returns a list of snippets that match the given query, along with
	// all the relevant files that contain the snippets.
	Search(context.Context, *connect_go.Request[v1.SearchRequest]) (*connect_go.Response[v1.SearchResponse], error)
	// Converse exposes a chatbot with knowledge backed by the content
	// of uploaded files. Each conversation is associated with a unique
	// identifier, which can be passed in again to continue the conversation.
	Converse(context.Context, *connect_go.Request[v1.ConverseRequest], *connect_go.ServerStream[v1.ConverseResponse]) error
}

// NewOperandServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOperandServiceHandler(svc OperandServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/operand.v1.OperandService/Search", connect_go.NewUnaryHandler(
		"/operand.v1.OperandService/Search",
		svc.Search,
		opts...,
	))
	mux.Handle("/operand.v1.OperandService/Converse", connect_go.NewServerStreamHandler(
		"/operand.v1.OperandService/Converse",
		svc.Converse,
		opts...,
	))
	return "/operand.v1.OperandService/", mux
}

// UnimplementedOperandServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOperandServiceHandler struct{}

func (UnimplementedOperandServiceHandler) Search(context.Context, *connect_go.Request[v1.SearchRequest]) (*connect_go.Response[v1.SearchResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("operand.v1.OperandService.Search is not implemented"))
}

func (UnimplementedOperandServiceHandler) Converse(context.Context, *connect_go.Request[v1.ConverseRequest], *connect_go.ServerStream[v1.ConverseResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("operand.v1.OperandService.Converse is not implemented"))
}
